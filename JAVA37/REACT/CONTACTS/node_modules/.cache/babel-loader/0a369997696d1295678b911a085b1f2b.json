{"ast":null,"code":"var _jsxFileName = \"/Users/kurtcobain/JAVA37/REACT/SRC/src/App.js\";\nimport React, { useState } from 'react';\nimport classes from './App.css';\nimport Box from './Components/box-component/boxComponent';\nconst emptyNums = [\"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\"];\nexport default function () {\n  const [state, updateState] = useState({\n    startNum: 1,\n    numbers: [],\n    level: 1,\n    isStarted: false\n  });\n\n  function fillArrayRandom(arr) {\n    let newArr = arr;\n\n    for (let i = state.startnum; i <= state.level; i++) {\n      newArr[Math.random() * 15] = i;\n    }\n\n    return newArr;\n  }\n\n  function checkAnswer() {}\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, \"Generate\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.bigBox,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, state.isStarted ? state.numbers.map((e, i) => /*#__PURE__*/React.createElement(Box, {\n    value: e,\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 56\n    }\n  })) : emptyNums.map((e, i) => /*#__PURE__*/React.createElement(Box, {\n    value: e,\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 108\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/kurtcobain/JAVA37/REACT/SRC/src/App.js"],"names":["React","useState","classes","Box","emptyNums","state","updateState","startNum","numbers","level","isStarted","fillArrayRandom","arr","newArr","i","startnum","Math","random","checkAnswer","button","bigBox","map","e"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,GAAP,MAAgB,yCAAhB;AAEA,MAAMC,SAAS,GAAG,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,EAAqB,GAArB,EAAyB,GAAzB,EAA6B,GAA7B,EAClB,GADkB,EACd,GADc,EACV,GADU,EACN,GADM,EACF,GADE,EACE,GADF,EACM,GADN,EACU,GADV,CAAlB;AAGA,eAAe,YAAW;AACxB,QAAM,CAACC,KAAD,EAAQC,WAAR,IAAuBL,QAAQ,CAAC;AAACM,IAAAA,QAAQ,EAAC,CAAV;AAAaC,IAAAA,OAAO,EAAC,EAArB;AAAyBC,IAAAA,KAAK,EAAC,CAA/B;AAAkCC,IAAAA,SAAS,EAAC;AAA5C,GAAD,CAArC;;AAEA,WAASC,eAAT,CAAyBC,GAAzB,EAA6B;AAC3B,QAAIC,MAAM,GAAGD,GAAb;;AACA,SAAI,IAAIE,CAAC,GAAGT,KAAK,CAACU,QAAlB,EAA4BD,CAAC,IAAIT,KAAK,CAACI,KAAvC,EAA8CK,CAAC,EAA/C,EAAkD;AAChDD,MAAAA,MAAM,CAACG,IAAI,CAACC,MAAL,KAAgB,EAAjB,CAAN,GAA6BH,CAA7B;AACD;;AACD,WAAOD,MAAP;AACD;;AAED,WAASK,WAAT,GAAsB,CAErB;;AAED,sBACE,uDACE;AAAK,IAAA,SAAS,EAAEhB,OAAO,CAACiB,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,CADF,eAIE;AAAK,IAAA,SAAS,EAAEjB,OAAO,CAACkB,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGf,KAAK,CAACK,SAAN,GAAkBL,KAAK,CAACG,OAAN,CAAca,GAAd,CAAkB,CAACC,CAAD,EAAIR,CAAJ,kBAAU,oBAAC,GAAD;AAAK,IAAA,KAAK,EAAEQ,CAAZ;AAAe,IAAA,GAAG,EAAER,CAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA5B,CAAlB,GAA0EV,SAAS,CAACiB,GAAV,CAAc,CAACC,CAAD,EAAIR,CAAJ,kBAAU,oBAAC,GAAD;AAAK,IAAA,KAAK,EAAEQ,CAAZ;AAAe,IAAA,GAAG,EAAER,CAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAxB,CAD7E,CAJF,CADF;AAUD","sourcesContent":["import React, { useState } from 'react';\nimport classes from './App.css';\nimport Box from './Components/box-component/boxComponent';\n\nconst emptyNums = [\"x\",\"x\",\"x\",\"x\",\"x\",\"x\",\"x\",\"x\",\n\"x\",\"x\",\"x\",\"x\",\"x\",\"x\",\"x\",\"x\"]\n\nexport default function (){\n  const [state, updateState] = useState({startNum:1, numbers:[], level:1, isStarted:false});\n\n  function fillArrayRandom(arr){\n    let newArr = arr;\n    for(let i = state.startnum; i <= state.level; i++){\n      newArr[Math.random() * 15] = i;\n    }\n    return newArr;\n  }\n\n  function checkAnswer(){\n\n  }\n  \n  return (\n    <>\n      <div className={classes.button}>\n        <button>Generate</button>\n      </div>\n      <div className={classes.bigBox}>\n        {state.isStarted ? state.numbers.map((e, i) => <Box value={e} key={i}/>) : emptyNums.map((e, i) => <Box value={e} key={i}/>)}\n      </div>\n    </>\n  );\n}"]},"metadata":{},"sourceType":"module"}