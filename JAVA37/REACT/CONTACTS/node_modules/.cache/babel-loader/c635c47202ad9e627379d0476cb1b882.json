{"ast":null,"code":"var _jsxFileName = \"/Users/kurtcobain/JAVA37/REACT/SRC/src/components/contact-page-component/contact-page.js\";\nimport React from 'react';\nimport { withRouter, Route, Link, Switch } from 'react-router-dom';\nimport { Context } from '../../App';\nimport ContactItemDetailed from '../contact-item-detailed-component/contact-item-detailed';\nimport Contactitem from '../contact-item-component/contact-item';\nimport classes from '../contact-page-component/contact-page.module.css';\nimport Add from '../add-component/add';\nconst BASE_URL = 'https://contacts-telran.herokuapp.com';\n\nclass ContactPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      contacts: [],\n      fetching: true,\n      addmode: false\n    };\n\n    this.deleteById = (token, id) => {\n      return fetch(`${BASE_URL}/api/contact/${id}`, {\n        method: 'DELETE',\n        headers: {\n          Authorization: token\n        }\n      }).then(response => {\n        if (response.ok) {\n          response.json().then(response => {\n            this.props.history.push('/contacts');\n            this.getAllContacts(token);\n          });\n        } else {\n          throw new Error(response.status);\n        }\n      });\n    };\n\n    this.updateContact = (token, contact, id) => {\n      let req = JSON.stringify(contact);\n      console.log('UPDATE CONTACT:', req);\n      return fetch(`${BASE_URL}/api/contact`, {\n        method: \"PUT\",\n        headers: {\n          'Content-Type': 'application/json; charset=utf-8',\n          Authorization: token\n        },\n        body: req\n      }).then(response => {\n        if (response.ok) {\n          console.log('CONTACT UPDATED!', response.status);\n          this.props.history.push(`/contacts/${id}`);\n          this.getAllContacts(token);\n        } else {\n          throw new Error(response.status);\n        }\n      });\n    };\n\n    this.addContact = (token, contact, id) => {\n      let req = JSON.stringify(contact);\n      console.log(req);\n      return fetch(`${BASE_URL}/api/contact`, {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json; charset=utf-8',\n          Authorization: token\n        },\n        body: req\n      }).then(response => {\n        if (response.ok) {\n          this.props.history.push('/contacts');\n          this.getAllContacts(token);\n        } else {\n          throw new Error(response.status);\n        }\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (!localStorage.getItem('token')) {\n      this.props.history.push('/login');\n    } else {\n      this.getAllContacts(localStorage.getItem('token'));\n    }\n  }\n\n  getAllContacts(token) {\n    return fetch(`${BASE_URL}/api/contact`, {\n      method: 'GET',\n      headers: {\n        Authorization: token\n      }\n    }).then(response => {\n      if (response.ok) {\n        response.json().then(response => {\n          console.log('GETALLCONTACTS: ', response.contacts);\n          this.setState({\n            contacts: [...response.contacts],\n            fetching: false\n          });\n        });\n      } else {\n        throw new Error(response.status);\n      }\n    });\n  }\n\n  render() {\n    if (this.state.contacts.length === 0 && !this.state.fetching) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }\n      }, \"No contacts here!\");\n    }\n\n    if (!this.state.fetching) {\n      console.log('render: ', this.state.contacts);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.main,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 20\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        onClick: () => {\n          this.setState({ ...this.state,\n            addmode: true\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 17\n        }\n      }, \"Add new contact\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.contactspage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.leftdiv,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }\n      }, this.state.contacts.map((contact, index) => {\n        return /*#__PURE__*/React.createElement(Contactitem, {\n          key: index,\n          id: index,\n          name: contact.name,\n          lastname: contact.lastname,\n          phone: contact.phone,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 37\n          }\n        });\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.rightdiv,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Route, {\n        path: \"/contacts/:id\",\n        render: props => {\n          return /*#__PURE__*/React.createElement(ContactItemDetailed, Object.assign({}, props, {\n            contacts: this.state.contacts,\n            deleteById: this.deleteById,\n            updateContact: this.updateContact,\n            addmode: this.state.addmode,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 81\n            }\n          }));\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(Route, {\n        path: \"/add\",\n        render: props => {\n          return /*#__PURE__*/React.createElement(Add, Object.assign({}, props, {\n            fun: this.addContact,\n            token: this.state.token,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 71\n            }\n          }));\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 25\n        }\n      }))));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 20\n        }\n      }, \"Loading...\");\n    }\n  }\n\n}\n\nexport default withRouter(ContactPage);","map":{"version":3,"sources":["/Users/kurtcobain/JAVA37/REACT/SRC/src/components/contact-page-component/contact-page.js"],"names":["React","withRouter","Route","Link","Switch","Context","ContactItemDetailed","Contactitem","classes","Add","BASE_URL","ContactPage","Component","constructor","props","state","contacts","fetching","addmode","deleteById","token","id","fetch","method","headers","Authorization","then","response","ok","json","history","push","getAllContacts","Error","status","updateContact","contact","req","JSON","stringify","console","log","body","addContact","componentDidMount","localStorage","getItem","setState","render","length","main","contactspage","leftdiv","map","index","name","lastname","phone","rightdiv"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport {withRouter, Route, Link, Switch} from 'react-router-dom';\nimport { Context } from '../../App';\n\nimport ContactItemDetailed from '../contact-item-detailed-component/contact-item-detailed';\nimport Contactitem from '../contact-item-component/contact-item';\nimport classes from '../contact-page-component/contact-page.module.css';\nimport Add from '../add-component/add';\n\n\nconst BASE_URL = 'https://contacts-telran.herokuapp.com';\n\nclass ContactPage extends React.Component{\n    constructor(props){\n        super(props);\n    }\n\n    state = {\n        contacts: [],\n        fetching:true,\n        addmode:false\n    }\n\n    componentDidMount(){\n        if(!localStorage.getItem('token')){ \n            this.props.history.push('/login');\n        }else{\n            this.getAllContacts(localStorage.getItem('token'));\n        }\n    }\n\n    getAllContacts(token){\n        return fetch(`${BASE_URL}/api/contact`,{\n            method:'GET',\n            headers:{\n                Authorization:token\n            }\n        }).then(response => {\n            if(response.ok){\n                response.json().then((response) => {\n                    console.log('GETALLCONTACTS: ', response.contacts);\n                    this.setState({contacts:[...response.contacts], fetching:false});\n                })\n            }else{\n                throw new Error(response.status);\n            }\n        });\n    }\n\n    deleteById = (token, id) => {\n        return fetch(`${BASE_URL}/api/contact/${id}`,{\n            method: 'DELETE',\n            headers: {\n                Authorization:token\n            }\n        }).then(response => {\n            if(response.ok){\n                \n                response.json().then((response) => {\n                    this.props.history.push('/contacts');\n                    this.getAllContacts(token);\n                })\n                \n            }else{\n                throw new Error(response.status);\n            }\n            \n        });\n    }\n\n    updateContact = (token, contact, id) => {\n        let req = JSON.stringify(contact);\n        console.log('UPDATE CONTACT:', req);\n        return fetch(`${BASE_URL}/api/contact`, {\n            method:\"PUT\",\n            headers:{\n                'Content-Type':'application/json; charset=utf-8',\n                Authorization:token\n            },\n            body:req\n        }).then(response => {\n            if(response.ok){\n                console.log('CONTACT UPDATED!', response.status);\n                this.props.history.push(`/contacts/${id}`);\n                this.getAllContacts(token);\n\n            }else{\n                throw new Error(response.status);\n            }\n            \n        })\n    }\n\n\n    addContact = (token, contact, id) => {\n        let req = JSON.stringify(contact);\n        console.log(req);\n        return fetch(`${BASE_URL}/api/contact`, {\n            method:\"POST\",\n            headers:{\n                'Content-Type':'application/json; charset=utf-8',\n                Authorization:token\n            },\n            body:req\n        }).then(response => {\n            if(response.ok){\n                this.props.history.push('/contacts');\n                this.getAllContacts(token);\n            }else{\n                throw new Error(response.status);\n            }\n            \n        })\n    }\n\n    render(){\n        if(this.state.contacts.length === 0 && !this.state.fetching){\n            return (<div>No contacts here!</div>);\n        }\n        if(!this.state.fetching){\n            console.log('render: ', this.state.contacts);\n            return(<div className={classes.main}>\n                <div onClick={() => {this.setState({...this.state, addmode:true})}}>Add new contact</div>\n                <div className={classes.contactspage}>\n                    \n                    <div className={classes.leftdiv}>\n                        {this.state.contacts.map((contact, index) => {\n                            return (<Contactitem key={index} id={index} name={contact.name} lastname={contact.lastname} phone={contact.phone}/>);\n                        })}\n                    </div>\n                    <div className={classes.rightdiv}>\n                        <Route path='/contacts/:id' render={(props) => { return <ContactItemDetailed {...props} contacts={this.state.contacts} deleteById={this.deleteById} updateContact ={this.updateContact} addmode={this.state.addmode}/>}}/>\n                        <Route path='/add' render={(props) => {return <Add {...props} fun={this.addContact} token={this.state.token}/>}}/>\n                    </div>\n                </div>\n            </div>);\n        }else{\n            return(<div>Loading...</div>);\n        }\n    }\n}\n\nexport default withRouter(ContactPage);\n"]},"metadata":{},"sourceType":"module"}