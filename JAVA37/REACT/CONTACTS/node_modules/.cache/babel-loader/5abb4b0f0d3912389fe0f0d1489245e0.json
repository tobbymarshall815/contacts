{"ast":null,"code":"var _jsxFileName = \"/Users/kurtcobain/JAVA37/REACT/SRC/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport { NavLink, Route, Switch, Router } from 'react-router-dom';\nimport Home from './components/home-component/home';\nimport About from './components/about-component/about';\nimport Login from './components/login-component/login';\nimport Contacts from './components/contact-page-component/contact-page';\nimport NavBarComponent from './components/navbar-component/navbar-component';\nimport NavBarLogged from './components/navbar-logged-component/navbar-logged';\nconst BASE_URL = 'https://contacts-telran.herokuapp.com';\nexport const Context = React.createContext();\nexport default class App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loaderShow: false,\n      contacts: [],\n      token: this.checkStorage\n    };\n\n    this.signIn = (email, password) => {\n      const auth = {\n        email,\n        password\n      };\n      const request = JSON.stringify(auth);\n      this.setState({ ...this.state,\n        loaderShow: true\n      });\n      return fetch(`${BASE_URL}/api/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json; charset=utf-8'\n        },\n        body: request\n      }).then(response => {\n        if (response.ok) {\n          console.log('SIGNIN STATUS:', response.status);\n          response.json().then(response => {\n            console.log(response.token);\n            localStorage.setItem(\"token\", response.token);\n            this.setState({ ...this.state,\n              token: response.token,\n              loaderShow: false\n            });\n          });\n        } else {\n          throw new Error(response.status);\n        }\n      });\n    };\n\n    this.deleteAllContacts = token => {\n      return fetch(`${BASE_URL}/api/clear`, {\n        method: 'DELETE',\n        headers: {\n          Authorization: token\n        }\n      }).then(response => {\n        if (response.ok) {\n          return true; //обновить список контактов\n        }\n\n        throw new Error(response.status);\n      });\n    };\n\n    this.updateContact = (token, contact) => {\n      let req = JSON.stringify(contact);\n      return fetch(`${BASE_URL}/api/contact`, {\n        method: \"PUT\",\n        headers: {\n          'Content-Type': 'application/json; charset=utf-8',\n          Authorization: token\n        },\n        body: req\n      }).then(response => {\n        if (response.ok) {\n          return response.status;\n        }\n\n        throw new Error(response.status);\n      });\n    };\n\n    this.getAllContacts = token => {\n      return fetch(`${BASE_URL}/api/contact`, {\n        method: 'GET',\n        headers: {\n          Authorization: token\n        }\n      }).then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n\n        throw new Error(response.status);\n      });\n    };\n\n    this.deleteById = (token, id) => {\n      return fetch(`${BASE_URL}/api/contact/${id}`, {\n        method: 'DELETE',\n        headers: {\n          Authorization: token\n        }\n      }).then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n\n        throw new Error(response.status);\n      });\n    };\n\n    this.addContact = (token, contact) => {\n      let req = JSON.stringify(contact);\n      console.log(req);\n      return fetch(`${BASE_URL}/api/contact`, {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json; charset=utf-8',\n          Authorization: token\n        },\n        body: req\n      }).then(response => {\n        if (response.ok) {\n          return true;\n        }\n\n        throw new Error(response.status);\n      });\n    };\n\n    this.checkStorage = () => {\n      if (localStorage.getItem('token')) {\n        console.log('TOKEN IS: ', localStorage.getItem('token'));\n        return localStorage.getItem('token');\n      }\n\n      return '';\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Context.Provider, {\n      value: {\n        registration: this.registration,\n        signin: this.signIn,\n        deleteAllcontacts: this.deleteAllContacts,\n        updateContact: this.updateContact,\n        getAllContacts: this.getAllContacts,\n        deleteById: this.deleteById,\n        addContact: this.addContact,\n        checkStorage: this.checkStorage\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }\n    }, this.state.token ? /*#__PURE__*/React.createElement(NavBarLogged, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 32\n      }\n    }) : /*#__PURE__*/React.createElement(NavBarComponent, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 51\n      }\n    }), /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      path: \"/\",\n      exact: true,\n      component: Home,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/about\",\n      component: About,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/login\",\n      component: Login,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/contacts\",\n      component: Contacts,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }\n    }))));\n  }\n\n}","map":{"version":3,"sources":["/Users/kurtcobain/JAVA37/REACT/SRC/src/App.js"],"names":["React","NavLink","Route","Switch","Router","Home","About","Login","Contacts","NavBarComponent","NavBarLogged","BASE_URL","Context","createContext","App","Component","state","loaderShow","contacts","token","checkStorage","signIn","email","password","auth","request","JSON","stringify","setState","fetch","method","headers","body","then","response","ok","console","log","status","json","localStorage","setItem","Error","deleteAllContacts","Authorization","updateContact","contact","req","getAllContacts","deleteById","id","addContact","getItem","render","registration","signin","deleteAllcontacts"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport {NavLink,Route, Switch, Router} from 'react-router-dom';\n\nimport Home from './components/home-component/home';\nimport About from './components/about-component/about';\nimport Login from './components/login-component/login';\nimport Contacts from './components/contact-page-component/contact-page';\n\nimport NavBarComponent from './components/navbar-component/navbar-component';\nimport NavBarLogged from './components/navbar-logged-component/navbar-logged';\n\nconst BASE_URL = 'https://contacts-telran.herokuapp.com';\nexport const Context = React.createContext();\n\nexport default class App extends React.Component{\n  state = {\n    loaderShow: false,\n    contacts:[],\n    token:this.checkStorage\n  }\n\n  signIn = (email, password) => {\n    const auth = {email,password};\n    const request = JSON.stringify(auth);\n    this.setState({...this.state, loaderShow:true});\n    return fetch(`${BASE_URL}/api/login`, {\n        method:'POST',\n        headers:{'Content-Type':'application/json; charset=utf-8'},\n        body:request\n    }).then(response => {\n        if(response.ok){\n            console.log('SIGNIN STATUS:', response.status);\n            response.json().then((response) => {\n              console.log(response.token);\n              localStorage.setItem(\"token\", response.token);\n              this.setState({...this.state, token:response.token, loaderShow:false});\n            })\n        }else{\n          throw new Error(response.status);\n        }\n        \n    });\n  }\n\n  deleteAllContacts = (token) => {\n    return fetch(`${BASE_URL}/api/clear`, {\n        method:'DELETE',\n        headers:{\n            Authorization:token\n        }\n    }).then(response => {\n        if(response.ok){\n            return true;\n            //обновить список контактов\n        }\n        throw new Error(response.status);\n    });\n  }\n\n  updateContact = (token, contact) => {\n    let req = JSON.stringify(contact);\n    return fetch(`${BASE_URL}/api/contact`, {\n        method:\"PUT\",\n        headers:{\n            'Content-Type':'application/json; charset=utf-8',\n            Authorization:token\n        },\n        body:req\n    }).then(response => {\n        if(response.ok){\n            return response.status;\n        }\n        throw new Error(response.status);\n    })\n  }\n\n  getAllContacts = (token) => {\n    return fetch(`${BASE_URL}/api/contact`,{\n        method:'GET',\n        headers:{\n            Authorization:token\n        }\n    }).then(response => {\n        if(response.ok){\n            return response.json();\n        }\n        throw new Error(response.status);\n    });\n  }\n\n  deleteById = (token, id) => {\n    return fetch(`${BASE_URL}/api/contact/${id}`,{\n        method: 'DELETE',\n        headers: {\n            Authorization:token\n        }\n    }).then(response => {\n        if(response.ok){\n            return response.json();\n        }\n        throw new Error(response.status);\n    });\n  }\n  addContact = (token, contact) => {\n    let req = JSON.stringify(contact);\n    console.log(req);\n    return fetch(`${BASE_URL}/api/contact`, {\n        method:\"POST\",\n        headers:{\n            'Content-Type':'application/json; charset=utf-8',\n            Authorization:token\n        },\n        body:req\n    }).then(response => {\n        if(response.ok){\n            return true;\n        }\n        throw new Error(response.status);\n    })\n  }\n\n  checkStorage = () => {\n    if(localStorage.getItem('token')){\n      console.log('TOKEN IS: ', localStorage.getItem('token'));\n      return(localStorage.getItem('token'));\n      \n    }\n    return '';\n  }\n\n  render(){\n    return(\n      <>\n          <Context.Provider value={{registration:this.registration, signin:this.signIn, deleteAllcontacts:this.deleteAllContacts, updateContact:this.updateContact, getAllContacts:this.getAllContacts, deleteById:this.deleteById, addContact:this.addContact, checkStorage:this.checkStorage}}>\n            {this.state.token? <NavBarLogged /> : <NavBarComponent/>}      \n              <Switch>\n                <Route path='/' exact component={Home} />\n                <Route path='/about' component={About} />\n                <Route path='/login' component={Login} />\n                <Route path='/contacts' component={Contacts} />\n              </Switch>\n          </Context.Provider>\n      </>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}