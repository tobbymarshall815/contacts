{"ast":null,"code":"var _jsxFileName = \"/Users/kurtcobain/JAVA37/REACT/SRC/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport { NavLink, Route, Switch } from 'react-router-dom';\nimport Home from './components/home-component/home';\nimport About from './components/about-component/about';\nimport Login from './components/login-component/login';\nimport Contacts from './components/contact-page-component/contact-page';\nimport NavBarComponent from './components/navbar-component/navbar-component';\nimport NavBarLogged from './components/navbar-logged-component/navbar-logged';\nconst BASE_URL = 'https://contacts-telran.herokuapp.com';\nconst Context = React.createContext();\nexport default class App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loaderShow: false,\n      contacts: [],\n      token: 'l'\n    };\n\n    this.registration = (email, password) => {\n      const auth = {\n        email,\n        password\n      };\n      const requestBody = JSON.stringify(auth);\n      return fetch(`${BASE_URL}/api/registration`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json; charset=utf-8'\n        },\n        body: requestBody\n      }).then(response => {\n        if (response.ok) {\n          console.log('STATUS: ', response.status);\n          return response.json(); //свапнуть роут на контакты\n        }\n\n        throw new Error(response.status);\n      });\n    };\n\n    this.signIn = (email, password) => {\n      const auth = {\n        email,\n        password\n      };\n      const request = JSON.stringify(auth);\n      return fetch(`${BASE_URL}/api/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json; charset=utf-8'\n        },\n        body: request\n      }).then(response => {\n        if (response.ok) {\n          console.log('STATUS: ', response.status);\n          return response.json(); //свапнуть роут на контакты / получить список контаков\n        }\n\n        throw new Error(response.status);\n      });\n    };\n\n    this.deleteAllContacts = token => {\n      return fetch(`${BASE_URL}/api/clear`, {\n        method: 'DELETE',\n        headers: {\n          Authorization: token\n        }\n      }).then(response => {\n        if (response.ok) {\n          return true; //обновить список контактов\n        }\n\n        throw new Error(response.status);\n      });\n    };\n\n    this.updateContact = (token, contact) => {\n      let req = JSON.stringify(contact);\n      return fetch(`${BASE_URL}/api/contact`, {\n        method: \"PUT\",\n        headers: {\n          'Content-Type': 'application/json; charset=utf-8',\n          Authorization: token\n        },\n        body: req\n      }).then(response => {\n        if (response.ok) {\n          return response.status;\n        }\n\n        throw new Error(response.status);\n      });\n    };\n\n    this.getAllContacts = token => {\n      return fetch(`${BASE_URL}/api/contact`, {\n        method: 'GET',\n        headers: {\n          Authorization: token\n        }\n      }).then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n\n        throw new Error(response.status);\n      });\n    };\n\n    this.deleteById = (token, id) => {\n      return fetch(`${BASE_URL}/api/contact/${id}`, {\n        method: 'DELETE',\n        headers: {\n          Authorization: token\n        }\n      }).then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n\n        throw new Error(response.status);\n      });\n    };\n\n    this.addContact = (token, contact) => {\n      let req = JSON.stringify(contact);\n      console.log(req);\n      return fetch(`${BASE_URL}/api/contact`, {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json; charset=utf-8',\n          Authorization: token\n        },\n        body: req\n      }).then(response => {\n        if (response.ok) {\n          return true;\n        }\n\n        throw new Error(response.status);\n      });\n    };\n\n    this.checkStorage = () => {\n      if (localStorage.getItem('token')) {\n        this.setState({ ...this.state,\n          token: JSON.parse(localStorage.getItem('item'))\n        });\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Context.Provider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }\n    }, this.state.token ? /*#__PURE__*/React.createElement(NavBarLogged, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 28\n      }\n    }) : /*#__PURE__*/React.createElement(NavBarComponent, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 47\n      }\n    }), /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      path: \"/\",\n      exact: true,\n      component: Home,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/about\",\n      component: About,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/login\",\n      component: Login,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/contacts\",\n      component: Contacts,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }\n    }))));\n  }\n\n}","map":{"version":3,"sources":["/Users/kurtcobain/JAVA37/REACT/SRC/src/App.js"],"names":["React","NavLink","Route","Switch","Home","About","Login","Contacts","NavBarComponent","NavBarLogged","BASE_URL","Context","createContext","App","Component","state","loaderShow","contacts","token","registration","email","password","auth","requestBody","JSON","stringify","fetch","method","headers","body","then","response","ok","console","log","status","json","Error","signIn","request","deleteAllContacts","Authorization","updateContact","contact","req","getAllContacts","deleteById","id","addContact","checkStorage","localStorage","getItem","setState","parse","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport {NavLink,Route, Switch} from 'react-router-dom';\n\nimport Home from './components/home-component/home';\nimport About from './components/about-component/about';\nimport Login from './components/login-component/login';\nimport Contacts from './components/contact-page-component/contact-page';\n\nimport NavBarComponent from './components/navbar-component/navbar-component';\nimport NavBarLogged from './components/navbar-logged-component/navbar-logged';\n\nconst BASE_URL = 'https://contacts-telran.herokuapp.com';\nconst Context = React.createContext();\n\nexport default class App extends React.Component{\n  state = {\n    loaderShow: false,\n    contacts:[],\n    token:'l'\n  }\n\n  registration = (email, password) => {\n    const auth = {email,password};\n    const requestBody = JSON.stringify(auth);\n    return fetch(`${BASE_URL}/api/registration`,{\n        method:'POST',\n        headers:{\n            'Content-Type':'application/json; charset=utf-8'\n        },\n        body:requestBody\n    }).then(response => {\n        if(response.ok){\n            console.log('STATUS: ', response.status);\n            return response.json();\n            //свапнуть роут на контакты\n        }\n        throw new Error(response.status);\n    });\n  }\n\n  signIn = (email, password) => {\n    const auth = {email,password};\n    const request = JSON.stringify(auth);\n    return fetch(`${BASE_URL}/api/login`, {\n        method:'POST',\n        headers:{'Content-Type':'application/json; charset=utf-8'},\n        body:request\n    }).then(response => {\n        if(response.ok){\n            console.log('STATUS: ', response.status);\n            return response.json();\n            //свапнуть роут на контакты / получить список контаков\n        }\n        throw new Error(response.status);\n    });\n  }\n\n  deleteAllContacts = (token) => {\n    return fetch(`${BASE_URL}/api/clear`, {\n        method:'DELETE',\n        headers:{\n            Authorization:token\n        }\n    }).then(response => {\n        if(response.ok){\n            return true;\n            //обновить список контактов\n        }\n        throw new Error(response.status);\n    });\n  }\n\n  updateContact = (token, contact) => {\n    let req = JSON.stringify(contact);\n    return fetch(`${BASE_URL}/api/contact`, {\n        method:\"PUT\",\n        headers:{\n            'Content-Type':'application/json; charset=utf-8',\n            Authorization:token\n        },\n        body:req\n    }).then(response => {\n        if(response.ok){\n            return response.status;\n        }\n        throw new Error(response.status);\n    })\n  }\n\n  getAllContacts = (token) => {\n    return fetch(`${BASE_URL}/api/contact`,{\n        method:'GET',\n        headers:{\n            Authorization:token\n        }\n    }).then(response => {\n        if(response.ok){\n            return response.json();\n        }\n        throw new Error(response.status);\n    });\n  }\n\n  deleteById = (token, id) => {\n    return fetch(`${BASE_URL}/api/contact/${id}`,{\n        method: 'DELETE',\n        headers: {\n            Authorization:token\n        }\n    }).then(response => {\n        if(response.ok){\n            return response.json();\n        }\n        throw new Error(response.status);\n    });\n  }\n  addContact = (token, contact) => {\n    let req = JSON.stringify(contact);\n    console.log(req);\n    return fetch(`${BASE_URL}/api/contact`, {\n        method:\"POST\",\n        headers:{\n            'Content-Type':'application/json; charset=utf-8',\n            Authorization:token\n        },\n        body:req\n    }).then(response => {\n        if(response.ok){\n            return true;\n        }\n        throw new Error(response.status);\n    })\n  }\n  checkStorage = () => {\n    if(localStorage.getItem('token')){\n      this.setState({...this.state, token:JSON.parse(localStorage.getItem('item'))});\n    }\n  }\n\n  render(){\n    return(\n      <>\n        <Context.Provider>\n        {this.state.token? <NavBarLogged /> : <NavBarComponent/>}\n        <Switch>\n          <Route path='/' exact component={Home} />\n          <Route path='/about' component={About} />\n          <Route path='/login' component={Login} />\n          <Route path='/contacts' component={Contacts} />\n        </Switch></Context.Provider>\n      </>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}